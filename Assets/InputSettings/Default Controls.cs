//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSettings/Default Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Input
{
    public partial class @DefaultControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DefaultControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Default Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerHand"",
            ""id"": ""bdf0ae77-7e20-417d-97b2-6417b1e9b798"",
            ""actions"": [
                {
                    ""name"": ""hoverCard"",
                    ""type"": ""Value"",
                    ""id"": ""7b56d91d-1776-478a-b4f5-2ad29529aa09"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""dragCard"",
                    ""type"": ""Button"",
                    ""id"": ""c722f8c0-4eb5-49cb-9331-09ad10f1ecc6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hover Mana"",
                    ""type"": ""Button"",
                    ""id"": ""83417265-d9de-482d-86f8-6751877675b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drag Mana"",
                    ""type"": ""Button"",
                    ""id"": ""efcee382-cee3-41ca-b11f-2850cd60865f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inspect Card"",
                    ""type"": ""Button"",
                    ""id"": ""2910ff4d-d2e8-43d9-8afc-e3063df33a73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reduce Card"",
                    ""type"": ""Button"",
                    ""id"": ""70c74364-44ef-4f37-8cc9-a8641f0c8837"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Mouse"",
                    ""id"": ""bfa03da9-a2c4-4f40-9b21-7fb7b3807cbb"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dragCard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""2e40ee64-6b0b-4ed0-bc9e-b4b0ea16e391"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dragCard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""4efe4288-77b7-4ae6-be00-7a3132bd5b71"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dragCard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Touch"",
                    ""id"": ""8ddde740-71ef-4c7a-85cb-d9c99006eb4a"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dragCard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""3455da2f-9220-4fe8-8ef5-6d6363b6d4eb"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dragCard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""a0ae38c4-f5b7-45bd-b539-126e5c3611ba"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dragCard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e51f5596-e1dc-4267-baa6-e06a691ecc05"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover Mana"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d764595c-8cbd-4430-b74f-0221b50fa7f6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Mana"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""690ae58a-d2f5-4400-8077-9b88fd404cbf"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inspect Card"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2c8b7b9-3df3-4d4d-8515-1b7e9e6f1463"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reduce Card"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d344069f-ea78-4627-bff6-1216e4b65461"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hoverCard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afc5d8e6-52ac-4ac4-bf19-18d2d5f0255d"",
                    ""path"": ""<Touchscreen>/pressure"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hoverCard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""54a42569-3307-4fb6-a9a7-b8d9d711d927"",
            ""actions"": [
                {
                    ""name"": ""Primary"",
                    ""type"": ""Button"",
                    ""id"": ""e06cfda9-7c78-404f-8070-7c5fdf6916de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""81698b59-573d-4792-8ef8-8d9c46eeedf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""65beb479-340e-4597-b025-f58d2d4161bf"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3495319d-6b64-4356-8d0f-b7b33e77150f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerHand
            m_PlayerHand = asset.FindActionMap("PlayerHand", throwIfNotFound: true);
            m_PlayerHand_hoverCard = m_PlayerHand.FindAction("hoverCard", throwIfNotFound: true);
            m_PlayerHand_dragCard = m_PlayerHand.FindAction("dragCard", throwIfNotFound: true);
            m_PlayerHand_HoverMana = m_PlayerHand.FindAction("Hover Mana", throwIfNotFound: true);
            m_PlayerHand_DragMana = m_PlayerHand.FindAction("Drag Mana", throwIfNotFound: true);
            m_PlayerHand_InspectCard = m_PlayerHand.FindAction("Inspect Card", throwIfNotFound: true);
            m_PlayerHand_ReduceCard = m_PlayerHand.FindAction("Reduce Card", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_Primary = m_UI.FindAction("Primary", throwIfNotFound: true);
            m_UI_Back = m_UI.FindAction("Back", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerHand
        private readonly InputActionMap m_PlayerHand;
        private List<IPlayerHandActions> m_PlayerHandActionsCallbackInterfaces = new List<IPlayerHandActions>();
        private readonly InputAction m_PlayerHand_hoverCard;
        private readonly InputAction m_PlayerHand_dragCard;
        private readonly InputAction m_PlayerHand_HoverMana;
        private readonly InputAction m_PlayerHand_DragMana;
        private readonly InputAction m_PlayerHand_InspectCard;
        private readonly InputAction m_PlayerHand_ReduceCard;
        public struct PlayerHandActions
        {
            private @DefaultControls m_Wrapper;
            public PlayerHandActions(@DefaultControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @hoverCard => m_Wrapper.m_PlayerHand_hoverCard;
            public InputAction @dragCard => m_Wrapper.m_PlayerHand_dragCard;
            public InputAction @HoverMana => m_Wrapper.m_PlayerHand_HoverMana;
            public InputAction @DragMana => m_Wrapper.m_PlayerHand_DragMana;
            public InputAction @InspectCard => m_Wrapper.m_PlayerHand_InspectCard;
            public InputAction @ReduceCard => m_Wrapper.m_PlayerHand_ReduceCard;
            public InputActionMap Get() { return m_Wrapper.m_PlayerHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerHandActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerHandActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerHandActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerHandActionsCallbackInterfaces.Add(instance);
                @hoverCard.started += instance.OnHoverCard;
                @hoverCard.performed += instance.OnHoverCard;
                @hoverCard.canceled += instance.OnHoverCard;
                @dragCard.started += instance.OnDragCard;
                @dragCard.performed += instance.OnDragCard;
                @dragCard.canceled += instance.OnDragCard;
                @HoverMana.started += instance.OnHoverMana;
                @HoverMana.performed += instance.OnHoverMana;
                @HoverMana.canceled += instance.OnHoverMana;
                @DragMana.started += instance.OnDragMana;
                @DragMana.performed += instance.OnDragMana;
                @DragMana.canceled += instance.OnDragMana;
                @InspectCard.started += instance.OnInspectCard;
                @InspectCard.performed += instance.OnInspectCard;
                @InspectCard.canceled += instance.OnInspectCard;
                @ReduceCard.started += instance.OnReduceCard;
                @ReduceCard.performed += instance.OnReduceCard;
                @ReduceCard.canceled += instance.OnReduceCard;
            }

            private void UnregisterCallbacks(IPlayerHandActions instance)
            {
                @hoverCard.started -= instance.OnHoverCard;
                @hoverCard.performed -= instance.OnHoverCard;
                @hoverCard.canceled -= instance.OnHoverCard;
                @dragCard.started -= instance.OnDragCard;
                @dragCard.performed -= instance.OnDragCard;
                @dragCard.canceled -= instance.OnDragCard;
                @HoverMana.started -= instance.OnHoverMana;
                @HoverMana.performed -= instance.OnHoverMana;
                @HoverMana.canceled -= instance.OnHoverMana;
                @DragMana.started -= instance.OnDragMana;
                @DragMana.performed -= instance.OnDragMana;
                @DragMana.canceled -= instance.OnDragMana;
                @InspectCard.started -= instance.OnInspectCard;
                @InspectCard.performed -= instance.OnInspectCard;
                @InspectCard.canceled -= instance.OnInspectCard;
                @ReduceCard.started -= instance.OnReduceCard;
                @ReduceCard.performed -= instance.OnReduceCard;
                @ReduceCard.canceled -= instance.OnReduceCard;
            }

            public void RemoveCallbacks(IPlayerHandActions instance)
            {
                if (m_Wrapper.m_PlayerHandActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerHandActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerHandActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerHandActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerHandActions @PlayerHand => new PlayerHandActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
        private readonly InputAction m_UI_Primary;
        private readonly InputAction m_UI_Back;
        public struct UIActions
        {
            private @DefaultControls m_Wrapper;
            public UIActions(@DefaultControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Primary => m_Wrapper.m_UI_Primary;
            public InputAction @Back => m_Wrapper.m_UI_Back;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void AddCallbacks(IUIActions instance)
            {
                if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
                @Primary.started += instance.OnPrimary;
                @Primary.performed += instance.OnPrimary;
                @Primary.canceled += instance.OnPrimary;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
            }

            private void UnregisterCallbacks(IUIActions instance)
            {
                @Primary.started -= instance.OnPrimary;
                @Primary.performed -= instance.OnPrimary;
                @Primary.canceled -= instance.OnPrimary;
                @Back.started -= instance.OnBack;
                @Back.performed -= instance.OnBack;
                @Back.canceled -= instance.OnBack;
            }

            public void RemoveCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIActions instance)
            {
                foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIActions @UI => new UIActions(this);
        public interface IPlayerHandActions
        {
            void OnHoverCard(InputAction.CallbackContext context);
            void OnDragCard(InputAction.CallbackContext context);
            void OnHoverMana(InputAction.CallbackContext context);
            void OnDragMana(InputAction.CallbackContext context);
            void OnInspectCard(InputAction.CallbackContext context);
            void OnReduceCard(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnPrimary(InputAction.CallbackContext context);
            void OnBack(InputAction.CallbackContext context);
        }
    }
}
